document.addEventListener('DOMContentLoaded', () => {
    const genreContainer = document.getElementById('genre-container');
    const numberContainer = document.getElementById('number-container');
    const inputsContainer = document.getElementById('inputs-container');
    const startButton = document.getElementById('start-btn');
    const stopButton = document.getElementById('stop-btn');
    const saveButton = document.getElementById('save-btn');
    const sizeSlider = document.getElementById('size-slider');
    const resultDisplay = document.getElementById('result-display');
    const canvas = document.getElementById('roulette-canvas');
    const ctx = canvas.getContext('2d');

    const genres = [
        '自分で入力', 'ファンタジー', '日常風景', '歴史・時代劇', 'サイエンスフィクション', 'サイバーパンク', 'スチームパンク', '神話・伝説', '夢・夢幻世界', 'ポストアポカリプス', '水中世界', '宇宙・銀河', '未来都市', '古代文明', 'メカ・ロボット', 'モンスター・クリーチャー', '幻獣・ドラゴン', 'ファッションイラスト', 'スポーツ・アクション', '食べ物・スイーツ', '植物・ボタニカル', '建築・ランドマーク', 'ストリートアート・グラフィティ', '抽象表現', 'ポートレイト（人物画）', 'ミニマルデザイン', 'チビキャラ・デフォルメ', 'ミュージカル・楽器', '四季・風物詩', 'おとぎ話・童話', 'ホラー・ゴシック'
    ];

    const genreWords = {
          'ファンタジー': [
    '月明かりに照らされる空飛ぶ城',
    '森の奥に隠された古代の魔法図書館',
    '騎士とドラゴンが対峙する丘の上',
    '水晶玉を覗き込む見習い魔女',
    '浮遊する島々を旅する冒険者たち',
    '魔法薬を調合する錬金術師の研究室',
    '華やかな妖精の舞踏会',
    '星を食べる黒猫の魔術師',
    '竜の背に乗った少女の大空散歩',
    '氷の城を統べる氷の女王',
    '時を操る砂時計の番人',
    '溶岩の海に佇む火炎の巨人',
    '魂を映す黒い鏡とその守護者',
    '巨大な樹木に宿る森の精霊',
    '砂漠の夜に現れる幻のオアシス',
    '風の精霊が運ぶ花びらの嵐',
    '古代遺跡から伸びる魔法陣の光',
    '夢を食べる幻獣との遭遇',
    '闇の中で光る魔法の剣',
    '星座が実体化した生き物たち'
  ],
  'サイエンスフィクション': [
    '流線型の宇宙戦艦が星雲を突き進む',
    'ヒューマノイドと共存する未来都市',
    '人工知能に支配された廃墟地帯',
    'サイバー義手を装着した探査ロボット',
    'ワープゲートの輝きと通過寸前の船影',
    '無重力シャンデリアが回る宇宙ステーション',
    'バイオチップを埋め込まれた人間の眼球クローズアップ',
    '点光源だけが見える暗黒星域の探査隊',
    '遺伝子改造動物が跋扈する実験施設',
    '月面都市で働くドローンたち',
    '惑星上に立つ巨大なコロニーリング',
    '磁場嵐の中、修理中のロボットアーム',
    'ホログラムの街路図が浮かぶターミナル',
    '人類最後の都市を囲むバリアフィールド',
    '火星の赤い砂塵を浴びる探査車',
    '生体金属が張り巡らされた宇宙服',
    '重力操作装置を試験中の無人実験機',
    'クローン胎児が並ぶ培養チューブ群',
    '銀河連邦の旗がはためく宇宙港',
    '未来型バイクがデジタルハイウェイを疾走'
  ],
  '日常風景': [
    '朝焼けのベランダでコーヒーを淹れる瞬間',
    '雨上がりの商店街を歩く傘の行列',
    '駅のホームでスマホを眺める乗客',
    '書店の窓辺に並ぶ色とりどりの文庫本',
    '自転車にまたがる学生とランドセル',
    'カフェのテラス席で涼む猫',
    '公園のベンチで読書する老夫婦',
    '夕暮れの公衆電話ボックス',
    '線路沿いでおしゃべりする友人たち',
    '交差点の信号待ちで風に揺れるスカート',
    '商店街の屋台で焼きそばを買う子ども',
    '雨の窓に映るネオン看板',
    'オフィスの休憩室でお茶を淹れる同僚',
    '洗濯物がはためくベランダ越しの風景',
    '自動販売機の前で飲み物を選ぶ男性',
    'レトロな公衆電話を使う人',
    'バス停で時刻表を確認する母子',
    '図書館の静かな閲覧室',
    '夜道を自転車で帰宅する高校生',
    '地元商店街のシャッターアート'
  ],
  '歴史・時代劇': [
    '江戸時代の宿場町を行く旅人',
    '刀を交える二人の侍',
    '武家屋敷の庭で茶を点てる侍女',
    '築城中の天守閣と職人たち',
    '千利休と弟子の茶会',
    '両国橋近くで揚げ物を売る露店',
    '落ち武者狩りの浪人たち',
    '平安貴族の十二単姿の女性',
    '鎧兜姿で馬上する武将',
    '関ヶ原の合戦直前の陣営',
    '雪深い山中を往く行商人',
    '忍者が屋根伝いに潜入する城郭',
    '大奥の廊下を歩く姫君',
    '明治時代の繁華街とガス灯',
    '大名行列の先導役の大鼓',
    '奈良の大仏建立工事の職人',
    '唐詩の翻訳を手がける学者',
    '漁村で網を引く漁師たち',
    '南北朝時代の合戦跡と野営風景',
    '武士の切腹を見守る家臣たち'
  ],
  'サイバーパンク': [
    'ネオン街を背にバイクを駆る義体の少女',
    '街角のグラフィティ風ホログラム広告',
    '雨に濡れた路地裏で取引するハッカー',
    'サイバーグラスから流れる情報ウィンドウ',
    '義手に埋め込まれたプラグポートの接続シーン',
    '高層ビルの谷間に見える浮遊ドローン',
    'スラム街でコードを書き続ける子どもたち',
    '拡張現実の地図が浮かぶメガネ',
    '鉄格子の印象的な地下マーケット',
    'アンドロイドと共に飲むスタンドバー',
    '電子パンクなドレスを着たストリートモデル',
    '街灯がカラフルに変化する交差点',
    'チップを埋め込む違法クリニックの内装',
    '巨大企業のロゴが映える広告塔',
    '排気ガスとホログラムが混在する空',
    'サイバー警官のパトロールシーン',
    'バイオモニターの心拍数が光る襟元',
    'ハッキングの波形が見えるネットワーク空間',
    '屋上の電脳寺で瞑想する義体僧侶',
    '未来的なパンクギターを弾く路上ミュージシャン'
  ],
  'スチームパンク': [
    '蒸気機関が轟く歯車都市',
    '歯車式飛行船の操縦席',
    '蒸気服を着た探検家と犬',
    '真鍮製ゴーグルをかけた少女',
    '巨大時計塔の内部歯車群',
    '蒸気エンジン車が砂漠を横断するシーン',
    '天秤天文台で観測する学者',
    '蒸気噴射式義手を持つ紳士',
    'レトロな歯車ロボットと子ども',
    '銅管が縦横に走る工房',
    '蒸気と煙が立ち上る船着き場',
    '内装が重厚な蒸気列車の客室',
    '蒸気圧水鉄砲を手にする子ども探偵',
    '歯車模様のドレスを纏った淑女',
    '蒸気ガジェットを調整する技師',
    '蒸気機関庭園で花を見る貴族',
    '真鍮製カメラで撮影する写真家',
    '歯車時計を覗き込む時計師見習い',
    '大気タービンの上に立つ冒険者',
    '蒸気船の甲板で見張りをする船員'
  ],
  '神話・伝説': [
    '雷神が鎚を振り上げる瞬間',
    '天女が舞い降りる湖面',
    '八岐大蛇と戦う英雄のクライマックス',
    '森の奥で祈りを捧げる巫女',
    '太陽神が天空を駆ける馬車',
    '海神ポセイドンの三叉矛と荒波',
    '十二神の宴が開かれる神殿',
    '狐火を操る伝説の稲荷',
    '地底の龍を封じた封印石',
    '巨人族と小人族の交易市',
    '月読命が夜空に微笑むシルエット',
    '山の神が鎮座する巨石',
    '水辺で水精が迷い子を誘う',
    '天岩戸の前で踊る神々',
    '黄泉比良坂を見守る黄泉の国境',
    '風神と雷神が大空で競演',
    '伝説の不死鳥が羽ばたく炎の輪',
    '黄河を渡る大禹のシーン',
    '霧深い山頂に現れる仙人',
    '巨大な蛇身を持つケルピー'
  ],
  '夢・夢幻世界': [
    '浮遊する雲の上の図書館',
    '封筒から飛び出す手紙の群れ',
    '綿菓子のような街並みを歩く人',
    '時計が溶けて滴る青い夜',
    '星屑を撒き散らす少女',
    'ガラスの階段を昇る無数の影',
    '海に浮かぶ虹色の帆船',
    '黒い空に浮かぶ白い島々',
    '目玉模様の木立を抜ける道',
    '透き通る蝶が舞う砂漠',
    '顔のない案内人が導く洞窟',
    '逆さまに落ちる世界の風景',
    '手のひらで踊るミニチュア都市',
    '架線のない線路を走る列車',
    '月光で揺れる透明な水路',
    '紙飛行機が集まる滝壺',
    '影だけが動く広場',
    '星座が描かれた浮遊するパズルピース',
    '無数のドアが並ぶ廊下',
    '虹の橋を渡る白い狼'
  ],
  'ポストアポカリプス': [
    '廃墟化したビル群を覆う蔦',
    '砂塵の嵐を背に歩くサバイバー',
    '崩れた高速道路を走る改造車',
    '放射能マスクを装着した探検家',
    '水没した都市の屋上ガーデン',
    'スチームパンク風リペアの廃棄ロボ',
    '廃材で作った仮設市場',
    '荒れ果てた遊園地のメリーゴーランド',
    '朽ちた飛行機の機首に腰掛ける子ども',
    'レトロ看板が錆びついた商店街',
    '野生化した植物で覆われたモニュメント',
    '木樽車を引くアウトローの一団',
    '蛍光塗料でマーキングされた地下道',
    '崩落したトンネルの先に見える光',
    'リサイクル装置を操るサイボーグ',
    '廃棄された核シェルターの内部',
    '風化した地球儀を抱く老人',
    'ガスマスクの少女とペットの鷹',
    'サバイバルテントが並ぶ砂漠基地',
    'デジタル時計の時刻が止まった街'
  ],
  '水中世界': [
    'サンゴ礁を泳ぐ透明なクラゲ',
    '深海探査艇の窓越しに見る巨大イカ',
    '人魚が歌う沈没船の残骸',
    '水中都市のドームの外壁',
    '光の柱が差し込む青い洞窟',
    '海底火山の噴出口と微生物群',
    'ウミガメと並泳するダイバー',
    '水中庭園に咲く光る花',
    '廃棄コンテナが並ぶ海底街',
    'クラゲ傘のような水中傘をさす人',
    '透明ドームで暮らす科学者たち',
    '深海魚の群れが作る渦潮',
    'イルカが飛び跳ねる波間のシルエット',
    '水圧で歪むガラスの水槽',
    '海草の森を抜ける小型潜水艇',
    '真珠の洞窟で宝石を探す探検家',
    '深海生物が集う熱水噴出孔',
    '古代文明の水中神殿',
    'ゆらめく水面に映る月',
    '人魚姫とタツノオトシゴの隊列'
  ],
  '宇宙・銀河': [
    '無数の星雲が渦を巻く銀河中心',
    '惑星リングを飛び交う小型船団',
    'ブラックホールの事象の地平線',
    '多次元ゲートをくぐる光の船',
    '彗星の尾を背景に浮かぶステーション',
    '二重恒星の間を漂う流星',
    '宇宙遊泳するワクチャリチューブ装置',
    '遺棄された古代宇宙船の残骸',
    '惑星大気圏突入中の探査機',
    '宇宙都市のドームを貫く光柱',
    'ガス惑星の渦中に沈む浮遊都市',
    '銀河間郵便船と衛星便路',
    '光速エンジンを始動するエンジニア',
    '無重力で踊る宇宙パフォーマー',
    'ダークマターの流れが見えるフィールド',
    '宇宙の彼方に浮かぶクリスタル惑星',
    '流星雨に包まれる銀河の剪影',
    '恒星を採掘する巨大神殿マシン',
    '宇宙樹が根を張る小惑星',
    '時空の歪みを映すホログラム'
  ],
  '未来都市': [
    'ホバーカーが行き交う空中道路',
    'ガラスチューブの通勤列車',
    'ビル壁面に咲く垂直庭園',
    'デジタルサイネージが煌く広場',
    '自動清掃ドローンが飛び交う歩道',
    'AR観光案内が浮かぶ街角',
    '屋上農園付きタワーマンション',
    '太陽光パネルが一面に広がる屋根',
    '浮遊型アパートメントポッド',
    '人型アシスタントロボットが接客',
    'ホログラム交差点で信号を待つ市民',
    '防災シャッターが展開した商店街',
    '透明ドームに覆われたサッカースタジアム',
    '未来的ファッションを着た通勤者',
    '街を照らすLED道路標識',
    '自律走行バスの乗降プラットフォーム',
    'ドローン宅配ロッカーが並ぶ通り',
    '3Dプリントで建設中の高層ビル',
    '流線型スカイポートと発着する航空機',
    '高層ビルの谷間に漂う霧'
  ],
  '古代文明': [
    'ピラミッドの内部で輝く宝石',
    '大理石の円形劇場で演じる俳優',
    'ジャングルに埋もれた神殿の入り口',
    '神官が踊るマヤの儀式広場',
    '石畳の道を行く古代ローマの行商人',
    '青銅の兜をかぶった戦士の肖像',
    '巨石記念碑に刻まれたヒエログリフ',
    'インカの段々畑を見下ろす天空の神殿',
    'エジプトのナイル河畔で編まれる布',
    'ギリシャ神殿の柱をよじ登る猿',
    '紀元前の港で帆船を整える人々',
    'メソポタミアの灌漑路を見守る女神像',
    'ドルイドの祭壇で儀式を執行する僧侶',
    '巨大な石車を動かす古代人たち',
    '古代中国の長城を築く作業風景',
    'マラケシュの市場で踊る露店主',
    '殷の青銅器に映る龍紋様拡大',
    'ガリアの戦士が身に纏うケルト装飾',
    '失われた都市アトランティスの海底遺跡',
    '日本の縄文土器を焼く野焼きの炎'
  ],
  'メカ・ロボット': [
    '戦場を駆ける二足歩行機動兵器',
    '工場でメンテナンスを受けるメカニックドローン',
    'スチールの外骨格を持つサイボーグ兵',
    '多関節アームが組み立てる組立ライン',
    '飛行能力を持つパワードスーツ',
    '浴室を掃除する家庭用ロボット',
    '重量挙げをする産業用ロボットアーム',
    'レーザー切断を行う自律型ユニット',
    'メカニカルウィングを広げる女性パイロット',
    '球体ドローンが警備する基地',
    '変形して車両になるコンバーチブルロボ',
    '屋外作業用水陸両用ロボット',
    'バイオニック義足を装着したアスリート',
    '産業プラントを巡回するメンテロボ',
    '高層ビルの窓清掃ロボット',
    '重装甲化した探索用ローバー',
    '人間サイズのハウスマイドロイド',
    '宇宙空間作業を行うエクソスーツ',
    '3Dプリントで自律修理するナノロボ群',
    '多脚歩行で山岳地を踏破する探査機'
  ],
  'モンスター・クリーチャー': [
    '森を徘徊する巨大クモの群れ',
    '牙を剥く地底のワーウルフ',
    '羽ばたくコウモリ人間の都市襲撃',
    '水辺で狩りをする半魚人',
    '火山洞窟に巣食う溶岩トカゲ',
    '霧深い湖の底から顔を出す怪物',
    '幻影を操るミミックの群体',
    '巨大キノコと共生するモンスター',
    '荒野で遭遇する二つ首の狼',
    '炎を吐く巨大カニの上陸',
    '時空をかき回す触手クリーチャー',
    '巨木に絡みつくツタ型怪物',
    '目玉が無数に浮かぶ空間の住人',
    '人の言葉を囁く毒蛇ドラゴン',
    '洞窟の天井から吊るされた暗黒の棲息者',
    '巨大カブトムシに乗る獣人',
    '氷結する息を吐く白いトカゲ',
    '虫の羽音を放つ夜行性モンスター',
    'ウイルスのように増殖するスライム',
    '悪夢を具現化する影の化身'
  ],
  '幻獣・ドラゴン': [
    '金色の鱗が輝く天空のドラゴン',
    '深緑の森を守る森龍の親子',
    '氷結する息を吹く氷龍',
    '火山口から飛び立つ溶岩龍',
    '真夜中の湖面に映る水龍',
    '紫の雷を纏う雷龍',
    '黒曜石の鱗を持つ闇龍',
    '透明な羽根を広げる光龍',
    '古代文字が浮かぶ龍巻の渦',
    '宝冠を戴いた王龍の肖像',
    '砂漠の砂塵を蹴立てる砂龍',
    '星屑を撒き散らす流星龍',
    '幻想的なオーロラをまとった龍',
    '天界と地界を繋ぐ虹龍',
    '樹木から産まれる樹龍の幼体',
    '溶岩湖の上空を舞う熔岩龍',
    '時空を行き来する瞬間龍',
    '月光を浴びる銀龍の佇まい',
    '竜巻を巻き起こす嵐龍',
    '幼竜が集う孵化の洞窟'
  ],
  'ファッションイラスト': [
    'モノクロで描くシックなオフィススタイル',
    'ビビッドカラーのストリートカジュアル',
    '1920年代風のフラッパードレス',
    'ネオマスキュリンなスーツスタイル',
    '和洋折衷の着物モダンドレス',
    'サステナブル素材のエコファッション',
    'フェティッシュ風レザージャケット',
    'スポーツミックスのアスレジャーコーデ',
    '未来的メタリックワンピース',
    'ヴィンテージデニムとレースの組み合わせ',
    '手描きフローラル柄のサマードレス',
    'パンクロック風スカルモチーフTシャツ',
    'クラシカルなテーラードコート',
    'アートプリントのオーバーサイズパーカー',
    'フォーマルイブニングガウンと手袋',
    'ネイティブ柄のウィンターニット',
    'ボタニカルプリントのビーチウェア',
    'サイバーパンクメイクとレザーブーツ',
    'ミニマリスト白シャツ×黒パンツスタイル',
    'キュートなフリル&リボンのガーリードレス'
  ],
  'スポーツ・アクション': [
    'サッカーゴール前でシュートを放つ瞬間',
    'スケボーでハーフパイプを飛び越えるトリック',
    'バスケットボールのダンクシュート',
    '水泳選手が飛び込むプールの飛沫',
    'マラソンランナーがゴールテープを切る瞬間',
    'クライミング壁を登るクライマー',
    'テニスラケットに当たるボールのインパクト',
    'サーフボードが波に乗る姿',
    'フェンシングの突きを放つエペ使い',
    'アイスホッケーでパックを狙うプレイヤー',
    'BMXバイクでジャンプする若者',
    '柔道の投げ技を決める選手',
    'ボクシングでフックを放つ一瞬',
    'アーチェリーの矢が的を射抜く構図',
    'チアリーディングの宙返り',
    'フリスビーゴルフでスローする場面',
    'アメリカンフットボールのタックル',
    'スノーボードでパウダースノーを滑る',
    'ロッククライミングで確保するビレイヤー',
    'カヤックで急流を下る冒険者'
  ],
  '食べ物・スイーツ': [
    '彩り野菜を盛り付けたスープボウル',
    'フレンチトーストにかかるはちみつの滴',
    '抹茶パフェと和菓子のセット',
    '焼きたてクロワッサンの白く輝く内層',
    'チョコレートフォンデュに浸す苺',
    '具だくさんのラーメンどんぶり',
    '揚げたて天ぷらとレモンの組み合わせ',
    'パンケーキタワーに乗せたバターとシロップ',
    '鮮やかな刺身盛り合わせ',
    'トマトソースがとろけるピザスライス',
    'キャラメルアップルにかじりつく手',
    'フルーツが並ぶタルトの断面',
    'ホイップクリーム山盛りのホットチョコレート',
    'ステーキナイフを入れる瞬間の断面',
    '抹茶クッキーと黒豆アイスのコントラスト',
    'スシロールを一口で食べる手元',
    'グラタンのチーズが糸を引くシーン',
    'カカオ豆と板チョコの配置',
    '彩り野菜サンドイッチの断面',
    'フローズンヨーグルトに乗せたミント'
  ],
  '植物・ボタニカル': [
    '朝露を纏うシダの葉',
    '色とりどりの多肉植物アレンジ',
    '開花前のつぼみが並ぶ枝',
    'かごに盛られた野草のスケッチ',
    '枯れた枝に留まるカマキリ',
    'ヨーロピアンローズガーデンの一角',
    'シルエットが美しいバオバブの木',
    '熱帯雨林の巨大なパームリーフ',
    '蕾から花開く蓮のクローズアップ',
    '竹林を抜ける光芒',
    '緩やかにうねるヒマワリ畑',
    'シクラメンの華やかな花弁',
    '野生のハーブ畑と道具',
    '桜吹雪が舞う並木道',
    '竹かごに詰めた山野草',
    'エアープランツの宙に浮くアレンジ',
    '山野のコケが作る緑の絨毯',
    '紅葉が映える渓谷の木立',
    'トロピカルフルーツの木に実る実',
    '花粉を集めるミツバチと花'
  ],
  '建築・ランドマーク': [
    'ゴシック様式の大聖堂ファサード',
    '未来的ガラス張り高層ビル群',
    '雪化粧した古城と背景の山々',
    '鉄道駅のアーチ形プラットフォーム',
    '伝統的な日本の町家の格子窓',
    '石造りのアーチ橋を渡る炎の車',
    '砂漠に佇むミナレット付きモスク',
    'イタリア風ピザ窯がある石畳広場',
    'コロニアル様式の官公庁舎',
    'ランドマークタワーの夜景とネオン',
    '竹張りの温泉旅館の外観',
    'アールデコ調劇場のエントランス',
    '斜めに傾いた古い灯台',
    'コンクリート打ち放しの美術館',
    'カリブ海沿岸のカラフルな家並み',
    'トラス構造が見える鉄道高架',
    '水辺に映る白亜の国会議事堂',
    '空中回廊で繋がる商業施設',
    'スペイン広場の噴水と階段',
    'モザイクタイルが鮮やかな地下鉄駅'
  ],
  'ストリートアート・グラフィティ': [
    'カラフルなロゴタイプスプレーアート',
    '動物モチーフを大胆に描いた壁面',
    'ステンシルで作る反戦メッセージ',
    '歴史的写真をオマージュしたモザイク',
    '3Dイリュージョンを施した路地裏',
    '粗いブラシストロークの抽象模様',
    '異なる文字フォントを組み合わせたタグ',
    'ビンテージ感ある旧看板の再現',
    '島国の風景をコラージュした壁画',
    '漫画風キャラクターを巨大に描く',
    'グラデーションで彩るポップアート',
    '自然物と融合したアーバンアート',
    '光と影を強調したモノクロスプレー',
    'レトロゲーム風ピクセルアート',
    '溶けるようなドリップエフェクト',
    '複数層のオーバーラップ作品',
    'QRコードアートで隠されたメッセージ',
    'フォトリアルな人物ポートレイト',
    '粒子が散るようなスプレータッチ',
    'ミニマルラインのストリートドローイング'
  ],
  '抽象表現': [
    'カラフルな水彩のドリッピング',
    '幾何学模様が交差する幾何抽象',
    '渦巻く黒と白のコントラスト',
    '曲線と直線だけで構成された構図',
    '光の粒が散りばめられた背景',
    '筆跡を残したエネルギッシュなタッチ',
    'カラーブロックを重ねたミニマリズム',
    '金箔を散らしたテクスチャ抽象',
    '螺旋状に流れる色彩の帯',
    '顔料の飛沫が飛ぶスプラッタ表現',
    '透明レイヤーが重なる多層構造',
    '点と線だけで作るモノクロリズム',
    '金属光沢を持つ立体的形状',
    '雨粒のように落ちる点描',
    '光のレインボーが走る波線',
    'マーブル模様の流動感',
    'ランダムなブラシストロークの重なり',
    '無限に続くかのような迷路パターン',
    'テクスチャ感強調の厚塗り表現',
    '斜めに歪むグリッドとカラーパッチ'
  ],
  'ポートレイト（人物画）': [
    '日差しを浴びた笑顔の少年',
    '静かに本を読む少女の横顔',
    '細部まで描く老人の皺と眼差し',
    '伝統衣装をまとった女性の正面像',
    'イヤホンで音楽を聴く青年',
    '窓辺で夕焼けを眺める母親',
    '帽子を深くかぶった探偵風の男性',
    '花冠を載せたロマンチックな少女',
    'モノクロームで捉えるシルエット',
    'メイクアップ中のモデルのクローズアップ',
    '笑い声を抑える仕草の子ども',
    '漆黒のドレスを着たバレリーナ',
    '作業現場でヘルメットを被る工事人',
    'ジャケットの襟を立てたクールな男性',
    '涙をこらえる女性の目もと',
    '瞬間を切り取る笑顔のカップル',
    '日常服のストリートスナップ風人物',
    '髪をかき上げる仕草の人物像',
    'スポーツウェア姿のアスリートポートレイト',
    '影を強調した陰影肖像'
  ],
  'ミニマルデザイン': [
    '単一色背景に白い丸一つ',
    '細い黒線で描く家のシルエット',
    '二つの正方形が交差する構図',
    'グラデーションで表現した水平線',
    '余白を活かした一点主義の花',
    'シンプルなアイコン風動物シルエット',
    '白地に一筆書きの顔',
    '極細線の抽象スクリブル',
    '二色のみで構成する幾何学模様',
    'マイナススペースで浮かぶ木の形',
    '単色グラデーションの円形オブジェ',
    '余白とのバランスだけで成立する文字',
    '同心円が徐々に広がる波紋',
    '曲線一本で表す人体シルエット',
    '縦線と横線だけの交差点',
    '斜め一本線が走る無地背景',
    '点だけで示す都市の夜景',
    '単純化した山並みのアイコン',
    '余白に沈む文字「静寂」',
    '小さな四角一つが印象的な構図'
  ],
  'チビキャラ・デフォルメ': [
    'お菓子を抱えるチビドラゴン',
    '宇宙服を着たデフォルメ宇宙飛行士',
    'ラーメン丼を抱えるミニチビキャラ',
    '小さな魔女と飛ぶホウキ',
    '丸っこいロボットが手を振る',
    '動物耳をつけたチビ巫女',
    '巨大スイーツと戯れるチビ少女',
    'ねこ耳メイドのミニキャラ',
    '小さな剣士と盾を持つ勇者',
    '音符模様の着ぐるみチビキャラ',
    '漢字一文字の旗を持つ小隊長',
    'チビモデルがポーズするファッション',
    'コーヒーカップに入るチビ仙人',
    '小さな探偵と虫眼鏡',
    'デフォルメ科学者が試験管を振る',
    'チビ忍者が屋根を伝うシルエット',
    '丸い飛行艇に乗るチビ隊員',
    'チビ天使が弓矢を構える',
    '大きな筆を担ぐチビ書道家',
    '小さな妖精が花びらに乗る'
  ],
  'ミュージカル・楽器': [
    'アコースティックギターを抱える奏者',
    'コントラバスを弓で弾くジャズメン',
    'ドラムセット越しのドラマー',
    'バイオリンの弓先をクローズアップ',
    'ピアノ鍵盤に映る手の影',
    'サックスのベル部分から光が漏れる',
    'トランペットを吹く女性ジャズシンガー',
    'カホンを叩く路上パフォーマー',
    'フルートを吹く妖精のシルエット',
    'エレキギターのフレットを押さえる手',
    '和太鼓を打つ和装の演奏家',
    'DJターンテーブルとヘッドフォン',
    'ハープに手をかけるアラビアン風奏者',
    'チェロを抱くクラシカルな姿',
    'シンバルが光るオーケストラの一員',
    'ビオラの楽譜を見る指揮者',
    '手旗信号でリズムを示す打楽器隊',
    '蒸気パンク風のギア付き楽器',
    'エレクトロニックキーボードとミキサー',
    '歌詞カードを持つシンガー'
  ],
  '四季・風物詩': [
    '春の桜並木と花びらの絨毯',
    '夏の海岸で遊ぶ子どもたち',
    '秋の紅葉狩りともみじのトンネル',
    '冬の雪だるまと子ども',
    '七夕の短冊が揺れる笹竹',
    '夏祭りの夜店と金魚すくい',
    '初夏の蛍が飛び交う川辺',
    '秋の収穫祭で並ぶかぼちゃ',
    '冬のこたつとミカンのコンポジション',
    '雪景色の神社鳥居',
    '春雨にぬれる燕の巣',
    '冬の湯気が立つ温泉宿',
    '秋風に揺れるすすきの草原',
    '雨上がりの紫陽花と水滴',
    '真夏の向日葵畑と青空',
    '雪原に残る足跡と動物影',
    '春の田植え風景と水田',
    '紅葉の山道を歩く一行',
    '冬の夜空に舞う雪吹雪',
    '夏の夜、入道雲と花火大会'
  ],
  'おとぎ話・童話': [
    '赤ずきんとオオカミの出会い',
    'シンデレラのガラスの靴発見シーン',
    'ヘンゼルとグレーテルのパンくず道',
    'ピノキオが星を見上げる夜',
    '白雪姫を抱く七人の小人',
    'ラプンツェルが塔の窓から髪を垂らす',
    'ジャックと豆の木が空へ伸びる',
    '三匹の子豚とレンガの家',
    'アリとキリギリスの対比シーン',
    '王子にキスされる眠り姫',
    '青ひげの城の秘密の扉',
    '童話村で開かれるお茶会',
    'ヴィクトリア朝風の赤い王女',
    '水の精と契約する少女',
    '窯の中に閉じ込められたシンデレラ',
    '林檎を持つ魔女と疑う村人',
    '鳥の言葉を聞くシンガー',
    '魔法のじゅうたんに乗る旅人',
    '鏡よ鏡、その残酷な答え',
    '王様の耳はロバの耳を隠す理髪師'
  ],
  'ホラー・ゴシック': [
    '古びた洋館の廊下を漂う影',
    'ロウソクの灯りに浮かぶ死神',
    '庭園の噴水から伸びる骨のツル',
    '塵に埋もれた人形たち',
    '朽ちた十字架が立つ墓地',
    '月夜に呻く棺の蓋',
    '教会のステンドグラスに映る異形',
    '背後からヴァンパイア',
    '黒いドレスを着た幽霊の微笑み',
    '廃工場に残る鎖と錆びた機械',
    '鏡に映らない老婆のシルエット',
    '森の奥深くから響く子守歌',
    '薄暗く半壊のホール',
    '祭壇に供えられた謎の骨片',
    '窓辺に佇む黒猫と赤い目',
    '古文書に描かれた悪魔の紋章',
    '干からびた手が土を掻き出す瞬間',
    '暗い地下室の扉に不気味な文字',
    '赤い月の夜空と古城のシルエット',
    '廃屋の屋根裏で揺れるブランコ'
  ],
    };

    let state = {
        segments: [],
        numSegments: 0,
        selectedGenre: '自分で入力',
        rotation: 0,
        spinSpeed: 0,
        isSpinning: false,
        stopRequested: false,
        stopStartTime: 0,
        initialSpinSpeed: 0,
    };

    genres.forEach(genre => {
        const button = document.createElement('button');
        button.textContent = genre;
        button.addEventListener('click', () => {
            state.selectedGenre = genre;
            highlightActiveButton(genreContainer, button);
            updateInputs();
        });
        genreContainer.appendChild(button);
    });

    for (let i = 2; i <= 20; i++) {
        const button = document.createElement('button');
        button.textContent = i;
        button.addEventListener('click', () => {
            state.numSegments = i;
            highlightActiveButton(numberContainer, button);
            createInputs(i);
            drawRoulette();
        });
        numberContainer.appendChild(button);
    }

    startButton.addEventListener('click', () => {
        if (state.isSpinning || state.segments.length < 2) return;
        state.isSpinning = true;
        state.stopRequested = false;
        state.spinSpeed = Math.random() * 0.2 + 0.2;
        state.initialSpinSpeed = state.spinSpeed;
        resultDisplay.textContent = '...';
        spin();
    });

    stopButton.addEventListener('click', () => {
        if (!state.isSpinning || state.stopRequested) return;
        state.stopRequested = true;
        state.stopStartTime = Date.now();
        state.initialSpinSpeed = state.spinSpeed;
    });
    
    saveButton.addEventListener('click', () => {
        const link = document.createElement('a');
        link.download = 'roulette.png';
        link.href = canvas.toDataURL('image/png');
        link.click();
    });

    sizeSlider.addEventListener('input', (e) => {
        const newSize = e.target.value;
        canvas.width = newSize;
        canvas.height = newSize;
        drawRoulette();
    });

    function highlightActiveButton(container, activeButton) {
        container.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
        activeButton.classList.add('active');
    }

    function createInputs(num) {
        inputsContainer.innerHTML = '';
        state.segments = [];
        for (let i = 0; i < num; i++) {
            const input = document.createElement('input');
            input.type = 'text';
            input.placeholder = `項目 ${i + 1}`;
            input.addEventListener('input', () => {
                updateSegments();
                drawRoulette();
            });
            inputsContainer.appendChild(input);
        }
        updateInputs();
    }
    
    function updateInputs() {
        if (state.numSegments === 0) return;
        const inputs = inputsContainer.querySelectorAll('input');
        const words = genreWords[state.selectedGenre] || [];

        inputs.forEach((input, i) => {
            if (state.selectedGenre === '自分で入力') {
                input.value = '';
            } else if (words.length > 0) {
                const randomWord = words[Math.floor(Math.random() * words.length)];
                input.value = randomWord;
            } else {
                input.value = `${state.selectedGenre} ${i + 1}`;
            }
        });
        updateSegments();
        drawRoulette();
    }

    function updateSegments() {
        state.segments = Array.from(inputsContainer.querySelectorAll('input')).map(input => input.value);
    }
    
    function drawRoulette() {
        if (state.numSegments < 2) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            return;
        }

        const anglePerSegment = (2 * Math.PI) / state.numSegments;
        const radius = canvas.width / 2;
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.save();
        ctx.translate(radius, radius);
        ctx.rotate(state.rotation);

        state.segments.forEach((segment, i) => {
            const startAngle = i * anglePerSegment;
            const endAngle = startAngle + anglePerSegment;

            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.arc(0, 0, radius * 0.95, startAngle, endAngle);
            ctx.closePath();
            
            ctx.fillStyle = `hsl(${(360 / state.numSegments) * i}, 80%, 75%)`;
            ctx.fill();
            ctx.stroke();

            ctx.save();
            ctx.rotate(startAngle + anglePerSegment / 2);
            ctx.textAlign = 'right';
            ctx.fillStyle = '#000';
            ctx.font = 'bold 16px sans-serif';
            ctx.fillText(segment, radius * 0.85, 0);
            ctx.restore();
        });
        
        ctx.restore();

        ctx.fillStyle = '#c0392b';
        ctx.beginPath();
        ctx.moveTo(radius + radius * 0.9, radius);
        ctx.lineTo(radius + radius * 1.1, radius - 10);
        ctx.lineTo(radius + radius * 1.1, radius + 10);
        ctx.closePath();
        ctx.fill();
    }
    
    function spin() {
        if (state.stopRequested) {
            const elapsedTime = Date.now() - state.stopStartTime;
            const duration = 5000;
            if (elapsedTime >= duration) {
                state.isSpinning = false;
                state.stopRequested = false;
                state.spinSpeed = 0;
                displayResult();
                return;
            }
            const easing = 1 - (elapsedTime / duration);
            state.spinSpeed = state.initialSpinSpeed * (easing * easing);
        }

        state.rotation += state.spinSpeed;
        state.rotation %= (2 * Math.PI);
        
        drawRoulette();

        if (state.isSpinning) {
            requestAnimationFrame(spin);
        }
    }
    
    function displayResult() {
        const anglePerSegment = (2 * Math.PI) / state.numSegments;
        const correctedRotation = (state.rotation + 2 * Math.PI) % (2 * Math.PI);
        const winningIndex = Math.floor(state.numSegments - (correctedRotation / anglePerSegment)) % state.numSegments;
        
        resultDisplay.textContent = state.segments[winningIndex] || 'エラー';
    }
    
    highlightActiveButton(genreContainer, genreContainer.firstChild);
    sizeSlider.dispatchEvent(new Event('input'));
});